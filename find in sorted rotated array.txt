class Solution {
    public int search(int[] nums, int target) {
     int pivot= findpivot(nums);
if(pivot==-1){
    return binarysearch(nums,target,0,nums.length-1);
}
        if(target==nums[pivot]){
            return pivot;
        }
        if(target>=nums[0]){
            return binarysearch(nums,target,0,pivot-1);
        }
        else{
            return binarysearch(nums,target,pivot+1,nums.length-1);
        }
        
        
        
    }
    int findpivot(int[]nums){
        
        
        int start=0;
        int end= nums.length-1;
        while(start<end){
            int mid= start+(end-start)/2;
            //case1
            if(mid<end&&nums[mid]>nums[mid+1]){
                return mid;
            }
            if(mid>start&&nums[mid]<nums[mid-1]){
                return mid-1;
            }if(nums[0]>=nums[mid]){
                end= mid-1;
            }else{
                start=mid+1;
            }
        }return -1;
    }
    int binarysearch(int[]arr,int target,int start,int end){
        
        while(start<=end){
            int mid= start+(end-start)/2;
            if(target>arr[mid]){
                start= mid+1;
            }else if(target<arr[mid]){
                end= mid-1;
            }else{
                return mid;
            }
        } return -1;
        
        
        
    }
}